name: Update Package Version from Tag

# package.jsonのバージョンを、プッシュされたタグに基づいて更新します。
# 完了後、Create Relase Draftを実行します。

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3などのタグにマッチ

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
      # リポジトリをチェックアウト（mainブランチを明示的に指定）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main  # mainブランチを明示的にチェックアウト
      
      # タグからバージョン番号を抽出
      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}  # v接頭辞を削除
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from tag: $TAG_NAME"
      
      # package.jsonの存在確認
      - name: Check package.json exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            exit 1
          fi
      
      # package.jsonの現在のバージョンを確認
      - name: Get current version from package.json
        id: current_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in package.json: $CURRENT_VERSION"
          echo "New version from tag: ${{ steps.version.outputs.version }}"
      
      # バージョンが異なる場合のみ更新
      - name: Update package.json version
        if: steps.current_version.outputs.current_version != steps.version.outputs.version
        run: |
          # jqを使ってpackage.jsonのversionフィールドを更新
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "Updated package.json version to: ${{ steps.version.outputs.version }}"
          
          # 変更内容を確認
          echo "Updated package.json content:"
          cat package.json
      
      # 変更があるかチェック
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet package.json; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in package.json"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in package.json"
          fi
      
      # Gitの設定
      - name: Configure Git
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      # 変更をコミットしてプッシュ
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # 現在のブランチ状態を確認
          echo "Current branch status:"
          git status
          git branch -a
          
          # mainブランチにいることを確認し、必要に応じて切り替え
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch: $CURRENT_BRANCH"
          
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "Not on main branch, switching to main..."
            git checkout main
          fi
          
          # リモートの最新状態を取得
          echo "Fetching latest changes from remote..."
          git fetch origin main
          
          # リモートとローカルの差分を確認
          BEHIND_COUNT=$(git rev-list --count HEAD..origin/main)
          echo "Commits behind remote: $BEHIND_COUNT"
          
          if [ "$BEHIND_COUNT" -gt 0 ]; then
            echo "Local branch is behind remote, pulling latest changes..."
            git pull origin main --rebase
          fi
          
          # 変更をコミット
          git add package.json
          git commit -m "Update package.json version to ${{ steps.version.outputs.version }} (from tag ${{ steps.version.outputs.tag_name }})"
          
          # プッシュ（フォースプッシュは使わず、再試行ロジックを追加）
          for i in {1..3}; do
            echo "Attempting to push (attempt $i/3)..."
            if git push origin main; then
              echo "✅ Successfully pushed changes"
              break
            else
              if [ $i -lt 3 ]; then
                echo "Push failed, fetching latest and retrying..."
                git fetch origin main
                git rebase origin/main
              else
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done
      
      # 結果を表示
      - name: Display result
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "✅ Successfully updated package.json version to ${{ steps.version.outputs.version }}"
          else
            echo "ℹ️ package.json version was already up to date (${{ steps.current_version.outputs.current_version }})"
          fi
      
      # コミットが確実に反映されるまで待機
      - name: Wait for commit to be processed
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "Waiting for commit to be processed..."
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Current commit SHA: $COMMIT_SHA"
          
          # GitHubのAPIを使ってコミットが反映されるまで待機
          for i in {1..30}; do
            echo "Checking commit status (attempt $i/30)..."
            
            # GitHub APIを使ってコミットの存在を確認
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA")
            
            # レスポンスにshaフィールドが含まれていればコミットが反映されている
            if echo "$RESPONSE" | jq -e '.sha' > /dev/null 2>&1; then
              echo "✅ Commit has been processed by GitHub API"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "⚠️ Timeout waiting for commit to be processed, continuing anyway..."
            else
              echo "Waiting 5 seconds before next check..."
              sleep 5
            fi
          done
      
      # package.jsonのバージョンが更新された場合、Create Unity Package Release Draftワークフローを実行
      - name: Trigger Create Release Draft workflow
        if: steps.changes.outputs.has_changes == 'true'
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: CreateReleaseDraft.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: '{"tag_name": "${{ steps.version.outputs.tag_name }}"}'
